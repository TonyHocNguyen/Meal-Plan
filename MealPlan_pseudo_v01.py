import random
def is_empty(requirement):
	"""
	param: requirement: a dictionary containing the nutrients
	"""
	return(bool(requirement))

# def get_random_recipe(recipes_list):
# 	"""
# 	Get a random recipe from MEALPLAN recipe database
# 	param: recipes_list: meal database.
# 	return: random_meal (nutrients of that random meal)
# 	"""
# 	random_meal = random.choice(recipes_list)
# 	return random_meal

def is_suitable(meal, requirement):
	"""
	Return true if the dishes fit the nutrious need
	param: requirement: dictionary containing the lower-bound & upper-bound
						limits & the required amounts of a nutrient defined
						by the user {"nutrient":(LB, UB)} 
	param: meal: string type indicate the food containing a variety
				of nutrtion categories
	return: true if the nutrient in the meal fit the requirements
	"""

	# the proposed data structure of the meals and the nutrition requirements
	requirement = {"nutrient1": (12, 23), "nutrient1": (12, 23), "nutrient3": (12, 23)} #data 
	user = {"nutrient": 123} # weekly plan
	meal = {"ingredient1": {"nutrient1": 12, "nutrient2": 23},	
			"ingredient2": {"nutrient1": 12, "nutrient2": 23},
			"ingredient3": {"nutrient1": 12, "nutrient2": 23}}

	for ingredient in meal:
		for nutrient in ingredient:
			user[nutrient] += meal[ingredient][nutrient]
	
	for nutrient in user: 
		if(user[nutrient] > requirement[nutrient][1]) or (user[nutrient] < requirement[nutrient[0]]): 
			return False

	return True

def add(meal):
	"""
	Adding the recipe into the mealplan when that recipe fits the requirements
	of nutritions
	param: meal: the meal that either was generated by meal plan or by the user
	return: mealplan: the meal plan should have the meal if it passes the 
						requirements
	"""
	meal = {"tag": {"ingredient1": {"nutrient1": 12, "nutrient2": 23},
					"ingredient2": {"nutrient1": 12, "nutrient2": 23},
					"ingredient3": {"nutrient1": 12, "nutrient2": 23}}}
	
	mealplan = {"tag": meal}
	for tag in meal:
		mealplan[tag] += meal

	return mealplan

# def nutrient():
# 	nutrients = []
# 	return nutrients


def mealplan(nutritious_requirement, recipes_list, fixed_meals):
	meal_plan = []
	# nutrition = {}
	meal_plan += fixed_meals
	for nutrient in nutritious_requirement:
		nutritious_requirement[nutrient] -= fixed_meals.nutrient

	while not is_empty(nutritious_requirement):
		random_recipe = random.choice(recipes_list)
		if is_suitable(random_recipe, nutritious_requirement):
			mealplan.add(random_recipe)	
	
	return mealplan

def mscore(user, requirement): 
	user = {"nutrient": 123}  
	result = 0
	for nutrient in user: 
		#If Xnut is greater than the IA and less than the UB
		#upper-bound > nutrient data > ideal: 
		if (requirement[1] > user[nutrient] > requirement[2]): 
			default_value = 1
			result = user[nutrient]/ requirement[1] + default_value
		#If Xnut is less than the IA and greater than the LB
		elif (requirement[0] < user[nutrient] < requirement[2]): 
			default_value = 1
			result = user[nutrient]/ requirement[2] + default_value
		# if Xnut is less than the LB 
		elif (requirement[0] > user[nutrient]) : 
			result = user[nutrient] / requirement[0] + default_value
